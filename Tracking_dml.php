<?php

// Data functions (insert, update, delete, form) for table Tracking

// This script and data application were generated by AppGini 5.84
// Download AppGini for free from https://bigprof.com/appgini/download/

function Tracking_insert() {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('Tracking');
	if(!$arrPerm[1]) return false;

	$data = array();
	$data['WhID'] = $_REQUEST['Warehouse'];
		if($data['WhID'] == empty_lookup_value) { $data['WhID'] = ''; }
	$data['Date'] = $_REQUEST['Warehouse'];
		if($data['Date'] == empty_lookup_value) { $data['Date'] = ''; }
	$data['Warehouse'] = $_REQUEST['Warehouse'];
		if($data['Warehouse'] == empty_lookup_value) { $data['Warehouse'] = ''; }
	$data['Tracking'] = $_REQUEST['Tracking'];
		if($data['Tracking'] == empty_lookup_value) { $data['Tracking'] = ''; }
	$data['Customer'] = $_REQUEST['Customer'];
		if($data['Customer'] == empty_lookup_value) { $data['Customer'] = ''; }
	$data['Dimensions'] = $_REQUEST['Dimensions'];
		if($data['Dimensions'] == empty_lookup_value) { $data['Dimensions'] = ''; }
	$data['Weight'] = $_REQUEST['Weight'];
		if($data['Weight'] == empty_lookup_value) { $data['Weight'] = ''; }
	$data['Volume'] = $_REQUEST['Volume'];
		if($data['Volume'] == empty_lookup_value) { $data['Volume'] = ''; }
	$data['Total'] = $_REQUEST['Total'];
		if($data['Total'] == empty_lookup_value) { $data['Total'] = ''; }
	$data['Employee'] = $_REQUEST['Employee'];
		if($data['Employee'] == empty_lookup_value) { $data['Employee'] = ''; }
	$data['Freight'] = $_REQUEST['Warehouse'];
		if($data['Freight'] == empty_lookup_value) { $data['Freight'] = ''; }
	$data['Status'] = $_REQUEST['Status'];
		if($data['Status'] == empty_lookup_value) { $data['Status'] = ''; }
	$data['Zone'] = $_REQUEST['Customer'];
		if($data['Zone'] == empty_lookup_value) { $data['Zone'] = ''; }
	$data['DeliveredDate'] = mysql_datetime($_REQUEST['DeliveredDate']);
		if($data['DeliveredDate'] == empty_lookup_value) { $data['DeliveredDate'] = ''; }
	if($data['Date'] == '') $data['Date'] = "1";
	if($data['Status'] == '') $data['Status'] = "READY FOR PICK UP";

	// hook: Tracking_before_insert
	if(function_exists('Tracking_before_insert')) {
		$args = array();
		if(!Tracking_before_insert($data, getMemberInfo(), $args)) { return false; }
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('Tracking', backtick_keys_once($data), $error);
	if($error)
		die("{$error}<br><a href=\"#\" onclick=\"history.go(-1);\">{$Translation['< back']}</a>");

	$recID = db_insert_id(db_link());

	// automatic WhID if passed as filterer
	if($_REQUEST['filterer_WhID']) {
		sql("update `Tracking` set `WhID`='" . makeSafe($_REQUEST['filterer_WhID']) . "' where `id`='" . makeSafe($recID, false) . "'", $eo);
	}

	// hook: Tracking_after_insert
	if(function_exists('Tracking_after_insert')) {
		$res = sql("select * from `Tracking` where `id`='" . makeSafe($recID, false) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=array();
		if(!Tracking_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('Tracking', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(!empty($_REQUEST['SelectedID'])) Tracking_copy_children($recID, $_REQUEST['SelectedID']);

	return $recID;
}

function Tracking_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = array(); // array of curl handlers for launching insert requests
	$eo = array('silentErrors' => true);
	$uploads_dir = realpath(dirname(__FILE__) . '/../' . $Translation['ImageFolder']);
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function Tracking_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('Tracking');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='Tracking' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='Tracking' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: Tracking_before_delete
	if(function_exists('Tracking_before_delete')) {
		$args=array();
		if(!Tracking_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	// child table: Status
	$res = sql("select `id` from `Tracking` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `Status` where `Tracking`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Status", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Status", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: TrackingCenter
	$res = sql("select `id` from `Tracking` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `TrackingCenter` where `Tracking`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "TrackingCenter", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "TrackingCenter", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: Claim
	$res = sql("select `id` from `Tracking` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `Claim` where `Tracking`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Claim", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Claim", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: Return
	$res = sql("select `id` from `Tracking` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `Return` where `Tracking`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Return", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "Return", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='Tracking_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	sql("delete from `Tracking` where `id`='$selected_id'", $eo);

	// hook: Tracking_after_delete
	if(function_exists('Tracking_after_delete')) {
		$args=array();
		Tracking_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='Tracking' and pkValue='$selected_id'", $eo);
}

function Tracking_update($selected_id) {
	global $Translation;

	// mm: can member edit record?
	$arrPerm=getTablePermissions('Tracking');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='Tracking' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='Tracking' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3) { // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['WhID'] = makeSafe($_REQUEST['Warehouse']);
		if($data['WhID'] == empty_lookup_value) { $data['WhID'] = ''; }
	$data['Date'] = makeSafe($_REQUEST['Warehouse']);
		if($data['Date'] == empty_lookup_value) { $data['Date'] = ''; }
	$data['Warehouse'] = makeSafe($_REQUEST['Warehouse']);
		if($data['Warehouse'] == empty_lookup_value) { $data['Warehouse'] = ''; }
	$data['Tracking'] = makeSafe($_REQUEST['Tracking']);
		if($data['Tracking'] == empty_lookup_value) { $data['Tracking'] = ''; }
	$data['Customer'] = makeSafe($_REQUEST['Customer']);
		if($data['Customer'] == empty_lookup_value) { $data['Customer'] = ''; }
	$data['Dimensions'] = makeSafe($_REQUEST['Dimensions']);
		if($data['Dimensions'] == empty_lookup_value) { $data['Dimensions'] = ''; }
	$data['Weight'] = makeSafe($_REQUEST['Weight']);
		if($data['Weight'] == empty_lookup_value) { $data['Weight'] = ''; }
	$data['Volume'] = makeSafe($_REQUEST['Volume']);
		if($data['Volume'] == empty_lookup_value) { $data['Volume'] = ''; }
	$data['Total'] = makeSafe($_REQUEST['Total']);
		if($data['Total'] == empty_lookup_value) { $data['Total'] = ''; }
	$data['Employee'] = makeSafe($_REQUEST['Employee']);
		if($data['Employee'] == empty_lookup_value) { $data['Employee'] = ''; }
	$data['Freight'] = makeSafe($_REQUEST['Warehouse']);
		if($data['Freight'] == empty_lookup_value) { $data['Freight'] = ''; }
	$data['Status'] = makeSafe($_REQUEST['Status']);
		if($data['Status'] == empty_lookup_value) { $data['Status'] = ''; }
	$data['Zone'] = makeSafe($_REQUEST['Customer']);
		if($data['Zone'] == empty_lookup_value) { $data['Zone'] = ''; }
	$data['DeliveredDate'] = mysql_datetime($_REQUEST['DeliveredDate']);
		if($data['DeliveredDate'] == empty_lookup_value) { $data['DeliveredDate'] = ''; }
	$data['selectedID'] = makeSafe($selected_id);

	// hook: Tracking_before_update
	if(function_exists('Tracking_before_update')) {
		$args = array();
		if(!Tracking_before_update($data, getMemberInfo(), $args)) { return false; }
	}

	$o = array('silentErrors' => true);
	sql('update `Tracking` set       `Date`=' . (($data['Date'] !== '' && $data['Date'] !== NULL) ? "'{$data['Date']}'" : 'NULL') . ', `Warehouse`=' . (($data['Warehouse'] !== '' && $data['Warehouse'] !== NULL) ? "'{$data['Warehouse']}'" : 'NULL') . ', `Tracking`=' . (($data['Tracking'] !== '' && $data['Tracking'] !== NULL) ? "'{$data['Tracking']}'" : 'NULL') . ', `Customer`=' . (($data['Customer'] !== '' && $data['Customer'] !== NULL) ? "'{$data['Customer']}'" : 'NULL') . ', `Dimensions`=' . (($data['Dimensions'] !== '' && $data['Dimensions'] !== NULL) ? "'{$data['Dimensions']}'" : 'NULL') . ', `Weight`=' . (($data['Weight'] !== '' && $data['Weight'] !== NULL) ? "'{$data['Weight']}'" : 'NULL') . ', `Volume`=' . (($data['Volume'] !== '' && $data['Volume'] !== NULL) ? "'{$data['Volume']}'" : 'NULL') . ', `Total`=' . (($data['Total'] !== '' && $data['Total'] !== NULL) ? "'{$data['Total']}'" : 'NULL') . ', `Employee`=' . (($data['Employee'] !== '' && $data['Employee'] !== NULL) ? "'{$data['Employee']}'" : 'NULL') . ', `Freight`=' . (($data['Freight'] !== '' && $data['Freight'] !== NULL) ? "'{$data['Freight']}'" : 'NULL') . ', `Status`=' . (($data['Status'] !== '' && $data['Status'] !== NULL) ? "'{$data['Status']}'" : 'NULL') . ', `Zone`=' . (($data['Zone'] !== '' && $data['Zone'] !== NULL) ? "'{$data['Zone']}'" : 'NULL') . ', `DeliveredDate`=' . (($data['DeliveredDate'] !== '' && $data['DeliveredDate'] !== NULL) ? "'{$data['DeliveredDate']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!='') {
		echo $o['error'];
		echo '<a href="Tracking_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: Tracking_after_update
	if(function_exists('Tracking_after_update')) {
		$res = sql("SELECT * FROM `Tracking` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!Tracking_after_update($data, getMemberInfo(), $args)) { return; }
	}

	// mm: update ownership data
	sql("update `membership_userrecords` set `dateUpdated`='" . time() . "' where `tableName`='Tracking' and `pkValue`='" . makeSafe($selected_id) . "'", $eo);

}

function Tracking_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('Tracking');
	if(!$arrPerm[1] && $selected_id=='') { return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != '') {
		$dvprint = true;
	}

	$filterer_Warehouse = thisOr(undo_magic_quotes($_REQUEST['filterer_Warehouse']), '');
	$filterer_Customer = thisOr(undo_magic_quotes($_REQUEST['filterer_Customer']), '');
	$filterer_Employee = thisOr(undo_magic_quotes($_REQUEST['filterer_Employee']), '');

	// populate filterers, starting from children to grand-parents

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: Warehouse
	$combo_Warehouse = new DataCombo;
	// combobox: Customer
	$combo_Customer = new DataCombo;
	// combobox: Employee
	$combo_Employee = new DataCombo;
	// combobox: Status
	$combo_Status = new Combo;
	$combo_Status->ListType = 0;
	$combo_Status->MultipleSeparator = ', ';
	$combo_Status->ListBoxHeight = 10;
	$combo_Status->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/Tracking.Status.csv')) {
		$Status_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/Tracking.Status.csv')));
		$combo_Status->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($Status_data)));
		$combo_Status->ListData = $combo_Status->ListItem;
	}else{
		$combo_Status->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("READY FOR PICKUP;;DELIVERED;;RETURNED;;")));
		$combo_Status->ListData = $combo_Status->ListItem;
	}
	$combo_Status->SelectName = 'Status';

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm[2]) {
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='Tracking' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='Tracking' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID) {
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID) {
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3) {
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("SELECT * FROM `Tracking` WHERE `id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'Tracking_view.php', false);
		}
		$combo_Warehouse->SelectedData = $row['Warehouse'];
		$combo_Customer->SelectedData = $row['Customer'];
		$combo_Employee->SelectedData = $row['Employee'];
		$combo_Status->SelectedData = $row['Status'];
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
	} else {
		$combo_Warehouse->SelectedData = $filterer_Warehouse;
		$combo_Customer->SelectedData = $filterer_Customer;
		$combo_Employee->SelectedData = $filterer_Employee;
		$combo_Status->SelectedText = ( $_REQUEST['FilterField'][1]=='13' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "READY FOR PICK UP");
	}
	$combo_Warehouse->HTML = '<span id="Warehouse-container' . $rnd1 . '"></span><input type="hidden" name="Warehouse" id="Warehouse' . $rnd1 . '" value="' . html_attr($combo_Warehouse->SelectedData) . '">';
	$combo_Warehouse->MatchText = '<span id="Warehouse-container-readonly' . $rnd1 . '"></span><input type="hidden" name="Warehouse" id="Warehouse' . $rnd1 . '" value="' . html_attr($combo_Warehouse->SelectedData) . '">';
	$combo_Customer->HTML = '<span id="Customer-container' . $rnd1 . '"></span><input type="hidden" name="Customer" id="Customer' . $rnd1 . '" value="' . html_attr($combo_Customer->SelectedData) . '">';
	$combo_Customer->MatchText = '<span id="Customer-container-readonly' . $rnd1 . '"></span><input type="hidden" name="Customer" id="Customer' . $rnd1 . '" value="' . html_attr($combo_Customer->SelectedData) . '">';
	$combo_Employee->HTML = '<span id="Employee-container' . $rnd1 . '"></span><input type="hidden" name="Employee" id="Employee' . $rnd1 . '" value="' . html_attr($combo_Employee->SelectedData) . '">';
	$combo_Employee->MatchText = '<span id="Employee-container-readonly' . $rnd1 . '"></span><input type="hidden" name="Employee" id="Employee' . $rnd1 . '" value="' . html_attr($combo_Employee->SelectedData) . '">';
	$combo_Status->Render();

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_Warehouse__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['Warehouse'] : $filterer_Warehouse); ?>"};
		AppGini.current_Customer__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['Customer'] : $filterer_Customer); ?>"};
		AppGini.current_Employee__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['Employee'] : $filterer_Employee); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(Warehouse_reload__RAND__) == 'function') Warehouse_reload__RAND__();
				if(typeof(Customer_reload__RAND__) == 'function') Customer_reload__RAND__();
				if(typeof(Employee_reload__RAND__) == 'function') Employee_reload__RAND__();
			}, 10); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function Warehouse_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#Warehouse-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_Warehouse__RAND__.value, t: 'Tracking', f: 'Warehouse' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="Warehouse"]').val(resp.results[0].id);
							$j('[id=Warehouse-container-readonly__RAND__]').html('<span id="Warehouse-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Warehouse_view_parent]').hide(); }else{ $j('.btn[id=Warehouse_view_parent]').show(); }


							if(typeof(Warehouse_update_autofills__RAND__) == 'function') Warehouse_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { /* */ return { s: term, p: page, t: 'Tracking', f: 'Warehouse' }; },
					results: function(resp, page) { /* */ return resp; }
				},
				escapeMarkup: function(str) { /* */ return str; }
			}).on('change', function(e) {
				AppGini.current_Warehouse__RAND__.value = e.added.id;
				AppGini.current_Warehouse__RAND__.text = e.added.text;
				$j('[name="Warehouse"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Warehouse_view_parent]').hide(); }else{ $j('.btn[id=Warehouse_view_parent]').show(); }


				if(typeof(Warehouse_update_autofills__RAND__) == 'function') Warehouse_update_autofills__RAND__();
			});

			if(!$j("#Warehouse-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_Warehouse__RAND__.value, t: 'Tracking', f: 'Warehouse' },
					success: function(resp) {
						$j('[name="Warehouse"]').val(resp.results[0].id);
						$j('[id=Warehouse-container-readonly__RAND__]').html('<span id="Warehouse-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Warehouse_view_parent]').hide(); }else{ $j('.btn[id=Warehouse_view_parent]').show(); }

						if(typeof(Warehouse_update_autofills__RAND__) == 'function') Warehouse_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_Warehouse__RAND__.value, t: 'Tracking', f: 'Warehouse' },
				success: function(resp) {
					$j('[id=Warehouse-container__RAND__], [id=Warehouse-container-readonly__RAND__]').html('<span id="Warehouse-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Warehouse_view_parent]').hide(); }else{ $j('.btn[id=Warehouse_view_parent]').show(); }

					if(typeof(Warehouse_update_autofills__RAND__) == 'function') Warehouse_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function Customer_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#Customer-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_Customer__RAND__.value, t: 'Tracking', f: 'Customer' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="Customer"]').val(resp.results[0].id);
							$j('[id=Customer-container-readonly__RAND__]').html('<span id="Customer-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Customers_view_parent]').hide(); }else{ $j('.btn[id=Customers_view_parent]').show(); }


							if(typeof(Customer_update_autofills__RAND__) == 'function') Customer_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { /* */ return { s: term, p: page, t: 'Tracking', f: 'Customer' }; },
					results: function(resp, page) { /* */ return resp; }
				},
				escapeMarkup: function(str) { /* */ return str; }
			}).on('change', function(e) {
				AppGini.current_Customer__RAND__.value = e.added.id;
				AppGini.current_Customer__RAND__.text = e.added.text;
				$j('[name="Customer"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Customers_view_parent]').hide(); }else{ $j('.btn[id=Customers_view_parent]').show(); }


				if(typeof(Customer_update_autofills__RAND__) == 'function') Customer_update_autofills__RAND__();
			});

			if(!$j("#Customer-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_Customer__RAND__.value, t: 'Tracking', f: 'Customer' },
					success: function(resp) {
						$j('[name="Customer"]').val(resp.results[0].id);
						$j('[id=Customer-container-readonly__RAND__]').html('<span id="Customer-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Customers_view_parent]').hide(); }else{ $j('.btn[id=Customers_view_parent]').show(); }

						if(typeof(Customer_update_autofills__RAND__) == 'function') Customer_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_Customer__RAND__.value, t: 'Tracking', f: 'Customer' },
				success: function(resp) {
					$j('[id=Customer-container__RAND__], [id=Customer-container-readonly__RAND__]').html('<span id="Customer-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Customers_view_parent]').hide(); }else{ $j('.btn[id=Customers_view_parent]').show(); }

					if(typeof(Customer_update_autofills__RAND__) == 'function') Customer_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function Employee_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#Employee-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_Employee__RAND__.value, t: 'Tracking', f: 'Employee' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="Employee"]').val(resp.results[0].id);
							$j('[id=Employee-container-readonly__RAND__]').html('<span id="Employee-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Staff_view_parent]').hide(); }else{ $j('.btn[id=Staff_view_parent]').show(); }


							if(typeof(Employee_update_autofills__RAND__) == 'function') Employee_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { /* */ return { s: term, p: page, t: 'Tracking', f: 'Employee' }; },
					results: function(resp, page) { /* */ return resp; }
				},
				escapeMarkup: function(str) { /* */ return str; }
			}).on('change', function(e) {
				AppGini.current_Employee__RAND__.value = e.added.id;
				AppGini.current_Employee__RAND__.text = e.added.text;
				$j('[name="Employee"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Staff_view_parent]').hide(); }else{ $j('.btn[id=Staff_view_parent]').show(); }


				if(typeof(Employee_update_autofills__RAND__) == 'function') Employee_update_autofills__RAND__();
			});

			if(!$j("#Employee-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_Employee__RAND__.value, t: 'Tracking', f: 'Employee' },
					success: function(resp) {
						$j('[name="Employee"]').val(resp.results[0].id);
						$j('[id=Employee-container-readonly__RAND__]').html('<span id="Employee-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Staff_view_parent]').hide(); }else{ $j('.btn[id=Staff_view_parent]').show(); }

						if(typeof(Employee_update_autofills__RAND__) == 'function') Employee_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_Employee__RAND__.value, t: 'Tracking', f: 'Employee' },
				success: function(resp) {
					$j('[id=Employee-container__RAND__], [id=Employee-container-readonly__RAND__]').html('<span id="Employee-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=Staff_view_parent]').hide(); }else{ $j('.btn[id=Staff_view_parent]').show(); }

					if(typeof(Employee_update_autofills__RAND__) == 'function') Employee_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/Tracking_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	}else{
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/Tracking_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Tracking details', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return Tracking_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return Tracking_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	}else{
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return Tracking_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly .= "\tjQuery('#Warehouse').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#Warehouse_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#Tracking').replaceWith('<div class=\"form-control-static\" id=\"Tracking\">' + (jQuery('#Tracking').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#Customer').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#Customer_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#Dimensions').replaceWith('<div class=\"form-control-static\" id=\"Dimensions\">' + (jQuery('#Dimensions').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#Weight').replaceWith('<div class=\"form-control-static\" id=\"Weight\">' + (jQuery('#Weight').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#Volume').replaceWith('<div class=\"form-control-static\" id=\"Volume\">' + (jQuery('#Volume').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#Total').replaceWith('<div class=\"form-control-static\" id=\"Total\">' + (jQuery('#Total').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#Employee').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#Employee_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#Status').replaceWith('<div class=\"form-control-static\" id=\"Status\">' + (jQuery('#Status').val() || '') + '</div>'); jQuery('#Status-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#DeliveredDate').parents('.input-group').replaceWith('<div class=\"form-control-static\" id=\"DeliveredDate\">' + (jQuery('#DeliveredDate').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert) {
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$locale = isset($Translation['datetimepicker locale']) ? ", locale: '{$Translation['datetimepicker locale']}'" : '';
		$jsEditable .= "\tjQuery('#DeliveredDate').addClass('always_shown').parents('.input-group').datetimepicker({ toolbarPlacement: 'top', sideBySide: true, showClear: true, showTodayButton: true, showClose: true, icons: { close: 'glyphicon glyphicon-ok' }, format: AppGini.datetimeFormat('dt') {$locale} });";
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(Warehouse)%%>', $combo_Warehouse->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(Warehouse)%%>', $combo_Warehouse->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(Warehouse)%%>', urlencode($combo_Warehouse->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(Customer)%%>', $combo_Customer->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(Customer)%%>', $combo_Customer->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(Customer)%%>', urlencode($combo_Customer->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(Employee)%%>', $combo_Employee->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(Employee)%%>', $combo_Employee->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(Employee)%%>', urlencode($combo_Employee->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(Status)%%>', $combo_Status->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(Status)%%>', $combo_Status->SelectedData, $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array('Warehouse' => array('Warehouse', 'Warehouse'), 'Customer' => array('Customers', 'Customer'), 'Employee' => array('Staff', 'Employee'), );
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Warehouse)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Tracking)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Customer)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Dimensions)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Weight)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Volume)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Total)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Employee)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(Status)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(DeliveredDate)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Warehouse)%%>', safe_html($urow['Warehouse']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Warehouse)%%>', html_attr($row['Warehouse']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Warehouse)%%>', urlencode($urow['Warehouse']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Tracking)%%>', safe_html($urow['Tracking']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Tracking)%%>', html_attr($row['Tracking']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Tracking)%%>', urlencode($urow['Tracking']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Customer)%%>', safe_html($urow['Customer']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Customer)%%>', html_attr($row['Customer']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Customer)%%>', urlencode($urow['Customer']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Dimensions)%%>', safe_html($urow['Dimensions']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Dimensions)%%>', html_attr($row['Dimensions']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Dimensions)%%>', urlencode($urow['Dimensions']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Weight)%%>', safe_html($urow['Weight']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Weight)%%>', html_attr($row['Weight']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Weight)%%>', urlencode($urow['Weight']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Volume)%%>', safe_html($urow['Volume']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Volume)%%>', html_attr($row['Volume']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Volume)%%>', urlencode($urow['Volume']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Total)%%>', safe_html($urow['Total']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Total)%%>', html_attr($row['Total']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Total)%%>', urlencode($urow['Total']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Employee)%%>', safe_html($urow['Employee']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Employee)%%>', html_attr($row['Employee']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Employee)%%>', urlencode($urow['Employee']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(Status)%%>', safe_html($urow['Status']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(Status)%%>', html_attr($row['Status']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Status)%%>', urlencode($urow['Status']), $templateCode);
		$templateCode = str_replace('<%%VALUE(DeliveredDate)%%>', app_datetime($row['DeliveredDate'], 'dt'), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(DeliveredDate)%%>', urlencode(app_datetime($urow['DeliveredDate'], 'dt')), $templateCode);
	}else{
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Warehouse)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Warehouse)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Tracking)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Tracking)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Customer)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Customer)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Dimensions)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Dimensions)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Weight)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Weight)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Volume)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Volume)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Total)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Total)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Employee)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Employee)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(Status)%%>', 'READY FOR PICK UP', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(Status)%%>', urlencode('READY FOR PICK UP'), $templateCode);
		$templateCode = str_replace('<%%VALUE(DeliveredDate)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(DeliveredDate)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans) {
		$templateCode = str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tWarehouse_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'Tracking_autofill.php?rnd1=$rnd1&mfk=Warehouse&id=' + encodeURIComponent('".addslashes($row['Warehouse'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'Tracking_autofill.php?rnd1=$rnd1&mfk=Warehouse&id=' + encodeURIComponent(AppGini.current_Warehouse{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#Warehouse$rnd1').prop('disabled', true); \$j('#WarehouseLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#Warehouse$rnd1').prop('disabled', false); " : "\$j('#Warehouse$rnd1').prop('disabled', true); ")."\$j('#WarehouseLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#Warehouse_caption').length) \$j('#Warehouse_caption').click(function() { /* */ Warehouse_update_autofills$rnd1(); });\n";

	$templateCode .= "\tCustomer_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'Tracking_autofill.php?rnd1=$rnd1&mfk=Customer&id=' + encodeURIComponent('".addslashes($row['Customer'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'Tracking_autofill.php?rnd1=$rnd1&mfk=Customer&id=' + encodeURIComponent(AppGini.current_Customer{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#Customer$rnd1').prop('disabled', true); \$j('#CustomerLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#Customer$rnd1').prop('disabled', false); " : "\$j('#Customer$rnd1').prop('disabled', true); ")."\$j('#CustomerLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#Customer_caption').length) \$j('#Customer_caption').click(function() { /* */ Customer_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('Tracking');
	if($selected_id) {
		$jdata = get_joined_record('Tracking', $selected_id);
		if($jdata === false) $jdata = get_defaults('Tracking');
		$rdata = $row;
	}
	$templateCode .= loadView('Tracking-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: Tracking_dv
	if(function_exists('Tracking_dv')) {
		$args=array();
		Tracking_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>